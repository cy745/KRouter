package com.zhangke.krouter.compiler

import com.tschuchort.compiletesting.JvmCompilationResult
import com.tschuchort.compiletesting.KotlinCompilation
import com.tschuchort.compiletesting.SourceFile
import com.zhangke.krouter.plugin.kcp.KCPComponentRegistrar
import org.jetbrains.kotlin.compiler.plugin.CompilerPluginRegistrar
import org.jetbrains.kotlin.compiler.plugin.ExperimentalCompilerApi
import org.junit.Test

private const val TestScreen = """
package com.zhangke.krouter.test

import com.zhangke.krouter.annotation.Destination
import com.zhangke.krouter.annotation.Param

interface Screen
interface TabScreen

@Destination("screen/test", "screen/test2")
data class TestScreen(
    val title: String,
    val name: String = ""
) : Screen

@Destination("screen/main")
class MainScreen(
    val number: Int = 0
) : Screen

@Destination("screen/settings")
class SettingsScreen(
    @Param(required = true)
    val index: Int? = 0,
    val count: Int = 10,
    val price: Int
) : TabScreen
"""

private const val ValueKeeper = """
package com.zhangke.krouter.generated

import com.zhangke.krouter.test.MainScreen
import com.zhangke.krouter.test.SettingsScreen
import com.zhangke.krouter.test.TestScreen
import kotlin.Any
import kotlin.Int
import kotlin.String
import kotlin.collections.Map

private fun <T : Any> TOINJECT(): T = throw IllegalArgumentException("Not Injected.")

/**
 * This class is generated by KRouter, do not modify it.
 */
public object KRouterInjectMap {
    public fun getMap(baseRoute: String): (Map<String, Any>) -> Any = when (baseRoute) {
        "screen/test", "screen/test2" -> { params ->
            require(params.containsKey("title")) { "Parameter title is required." }
            val title = params["title"] as? String
            require(title != null) { "Parameter title can not be null." }
            val name = params["name"] as? String
            TestScreen(title = title,
                    name = name ?: TOINJECT())
        }
        "screen/main" -> { params ->
            val number = params["number"] as? Int
            MainScreen(number = number ?: TOINJECT())
        }
        "screen/settings" -> { params ->
            require(params.containsKey("index")) { "Parameter index is required." }
            val index = params["index"] as? Int
            val count = params["count"] as? Int
            require(params.containsKey("price")) { "Parameter price is required." }
            val price = params["price"] as? Int
            require(price != null) { "Parameter price can not be null." }
            SettingsScreen(index = index ?: TOINJECT(),
                    count = count ?: TOINJECT(),
                    price = price)
        }
        else -> throw IllegalArgumentException("Route Not Found.")
    }
}
"""

@OptIn(ExperimentalCompilerApi::class)
class KRouterKCPPluginTest {

    @Test
    fun test() {
        val kotlinSource = listOf(
            SourceFile.kotlin("Screens.kt", TestScreen),
            SourceFile.kotlin("ValueKeeper.kt", ValueKeeper)
        )

        val result = compile(
            sourceFiles = kotlinSource,
            plugins = listOf(KCPComponentRegistrar())
        )

        // 反射获取经过处理后的类
        val clazz = result.classLoader.loadClass("com.zhangke.krouter.test.RouterMap")
        val ins = clazz.getField("INSTANCE").get(null)
        val method = clazz.getDeclaredMethod("getMap")
        val methodResult = method.invoke(ins) as Map<*, *>

        // 传参尝试调用方法，获取结果
        methodResult.forEach { entry ->
            val key = entry.key as? String
            val value = entry.value as? (Map<String, Any>) -> Any?
            val resultItem = value?.invoke(mapOf("name" to "123", "number" to 123))

            println("result: [$key] -> $resultItem")
        }
    }

    @OptIn(ExperimentalCompilerApi::class)
    fun compile(
        sourceFiles: List<SourceFile>,
        plugins: List<CompilerPluginRegistrar> = emptyList()
    ): JvmCompilationResult {
        return KotlinCompilation().apply {
            sources = sourceFiles
            inheritClassPath = true
            compilerPluginRegistrars = plugins
        }.compile()
    }
}

